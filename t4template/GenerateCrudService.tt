<#@ template language="C#" hostspecific="true" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.IO" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Threading.Tasks" #>

<#
    // modifiable
    string entityName = "Product";
    string ServiceProjectName = "Service";
    string DALProjectName = "DAL";
    string rootFolder = "TestProject";

    // don't modify this
    string namespaceName = $"{rootFolder}.{ServiceProjectName}.Interfaces";

    // Determine the output folder relative to the template file
    string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
    string outputFolder = Path.Combine(templateDirectory, $"../{ServiceProjectName}/Services");

    if (!Directory.Exists(outputFolder))
    {
        Directory.CreateDirectory(outputFolder);
    }

    // Determine the output file path
    string outputFilePath = Path.Combine(outputFolder, $"{entityName}Service.cs");

    // Generate the content
    string content = $@"
using {rootFolder}.{DALProjectName}.DTO;
using {rootFolder}.{ServiceProjectName}.Interfaces;
using {rootFolder}.{DALProjectName}.Models;
using {rootFolder}.{DALProjectName}.Interfaces;
using System.Threading.Tasks;

namespace {namespaceName}
{{
    public class {entityName}Service : I{entityName}Service
    {{
        private readonly I{entityName}Repository _{entityName.ToLower()}Repository;

        public {entityName}Service(I{entityName}Repository repository)
        {{
            _{entityName.ToLower()}Repository = repository;
        }}

        public async Task<{entityName}Dto> Create({entityName}Dto dto)
        {{
            var entity = new {entityName}
            {{
                Id = dto.Id,
                Name = dto.Name
                // Map other properties
            }};
            await _{entityName.ToLower()}Repository.Create(entity);
            return dto;
        }}

        public async Task<{entityName}Dto> Read(string id)
        {{
            var entity = await _{entityName.ToLower()}Repository.Read(id);
            return entity == null ? null : new {entityName}Dto
            {{
                Id = entity.Id,
                Name = entity.Name
                // Map other properties
            }};
        }}

        public async Task<{entityName}Dto> Update(string id, {entityName}Dto dto)
        {{
            var entity = new {entityName}
            {{
                Id = id,
                Name = dto.Name
                // Map other properties
            }};
            var updatedEntity = await _{entityName.ToLower()}Repository.Update(entity);
            return updatedEntity == null ? null : new {entityName}Dto
            {{
                Id = updatedEntity.Id,
                Name = updatedEntity.Name
                // Map other properties
            }};
        }}

        public async Task<bool> Delete(string id)
        {{
            return await _{entityName.ToLower()}Repository.Delete(id);
        }}
    }}
}}";

    // Write the content to the specified file path
    File.WriteAllText(outputFilePath, content);
#>
