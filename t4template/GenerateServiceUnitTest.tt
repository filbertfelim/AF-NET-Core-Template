<#@ template language="C#" hostspecific="true" #>
<#@ output extension=".cs" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>

<#
    // modifiable
    string entityName = "Product";
    string ServiceProjectName = "Service";
    string DALProjectName = "DAL";
    string rootFolder = "TestProject";

    // don't modify this
    string dtoNamespace = $"{rootFolder}.{DALProjectName}.DTO";
    string modelNamespace = $"{rootFolder}.{DALProjectName}.Models";
    string repositoryNamespace = $"{rootFolder}.{DALProjectName}.Interfaces";
    string serviceNamespace = $"{rootFolder}.{ServiceProjectName}.Interfaces";
    string testNamespace = $"{rootFolder}.{ServiceProjectName}.Tests.Tests";
    string serviceClassName = $"{entityName}Service";
    string testClassName = $"{entityName}ServiceTest";
    string repositoryInterfaceName = $"I{entityName}Repository";
    string dtoClassName = $"{entityName}Dto";
    string modelClassName = $"{entityName}";

    string dtoFilePath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), $"../{DALProjectName}/DTO/{entityName}Dto.cs");
    string modelFilePath = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), $"../{DALProjectName}/Models/{entityName}.cs");

    // Output folder path
    string outputFolder = Path.Combine(Path.GetDirectoryName(Host.TemplateFile), $"../{ServiceProjectName}.Tests/Tests");

    if (!Directory.Exists(outputFolder))
    {
        Directory.CreateDirectory(outputFolder);
    }

    string outputFilePath = Path.Combine(outputFolder, $"{testClassName}.cs");

    // Read the DTO and model files
    string dtoFileContent = File.ReadAllText(dtoFilePath);
    string modelFileContent = File.ReadAllText(modelFilePath);

    string jsonBody = "{";
    string dtoInstantiation = $"var dto = new {entityName}Dto {{ ";
    
    // Manually handling the string operations instead of using LINQ
    string[] lines = dtoFileContent.Split(new[] { Environment.NewLine }, StringSplitOptions.None);
    int propertyCount = 0;
    
    foreach (var line in lines)
    {
        string trimmedLine = line.Trim();

        // Ensure that the line starts with "public" and is not a class declaration
        if (trimmedLine.StartsWith("public") && trimmedLine.Contains("{ get; set; }"))
        {
            string[] parts = trimmedLine.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
            if (parts.Length >= 3)
            {
                string propertyType = parts[1];
                string propertyName = parts[2].TrimEnd(';');

                if (propertyCount > 0)
                {
                    jsonBody += ",";
                    dtoInstantiation += ", ";
                }

                jsonBody += $@" \""{propertyName}\"": \""Test {propertyName}\""";
                dtoInstantiation += $"{propertyName} = \"Test {propertyName}\"";

                propertyCount++;
            }
        }
    }
    
    jsonBody += "}";
    dtoInstantiation += " };";

    string entityJsonBody = "{";
    string entityInstantiation = $"var entity = new {entityName} {{ ";

    // Manually handling the string operations instead of using LINQ
    string[] entityLines = modelFileContent.Split(new[] { Environment.NewLine }, StringSplitOptions.None);
    int entityPropertyCount = 0;

    foreach (var line in entityLines)
    {
        string trimmedLine = line.Trim();

        // Ensure that the line starts with "public" and is not a class declaration
        if (trimmedLine.StartsWith("public") && trimmedLine.Contains("{ get; set; }"))
        {
            string[] parts = trimmedLine.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
            if (parts.Length >= 3)
            {
                string propertyType = parts[1];
                string propertyName = parts[2].TrimEnd(';');

                if (entityPropertyCount > 0)
                {
                    entityJsonBody += ",";
                    entityInstantiation += ", ";
                }

                entityJsonBody += $@" \""{propertyName}\"": \""Test {propertyName}\""";
                entityInstantiation += $"{propertyName} = \"Test {propertyName}\"";

                entityPropertyCount++;
            }
        }
    }

    entityJsonBody += "}";
    entityInstantiation += " };";


    // Generate the test class content
    string content = $@"
using {dtoNamespace};
using {modelNamespace};
using {repositoryNamespace};
using {serviceNamespace};
using Moq;
using System.Threading.Tasks;
using Xunit;

namespace {testNamespace}
{{
    public class {testClassName}
    {{
        private readonly Mock<{repositoryInterfaceName}> _mockRepository;
        private readonly {serviceClassName} _service;

        public {testClassName}()
        {{
            _mockRepository = new Mock<{repositoryInterfaceName}>();
            _service = new {serviceClassName}(_mockRepository.Object);
        }}

        [Fact]
        public async Task Create_ReturnsDto_WhenEntityCreated()
        {{
            // Arrange
            {dtoInstantiation};
            {entityInstantiation};
            _mockRepository.Setup(r => r.Create(It.IsAny<{modelClassName}>())).Returns(Task.CompletedTask);

            // Act
            var result = await _service.Create(dto);

            // Assert
            _mockRepository.Verify(r => r.Create(It.Is<{modelClassName}>(e => e.Id == dto.Id && e.Name == dto.Name)), Times.Once);
            Assert.Equal(dto.Id, result.Id);
            Assert.Equal(dto.Name, result.Name);
        }}

        [Fact]
        public async Task Read_ReturnsDto_WhenEntityFound()
        {{
            // Arrange
            {entityInstantiation};
            _mockRepository.Setup(r => r.Read(It.IsAny<string>())).ReturnsAsync(entity);

            // Act
            var result = await _service.Read(""Test Id"");

            // Assert
            _mockRepository.Verify(r => r.Read(It.Is<string>(id => id == ""Test Id"")), Times.Once);
            Assert.Equal(entity.Id, result.Id);
            Assert.Equal(entity.Name, result.Name);
        }}

        [Fact]
        public async Task Read_ReturnsNull_WhenEntityNotFound()
        {{
            // Arrange
            _mockRepository.Setup(r => r.Read(It.IsAny<string>())).ReturnsAsync(({modelClassName})null);

            // Act
            var result = await _service.Read(""1"");

            // Assert
            _mockRepository.Verify(r => r.Read(It.Is<string>(id => id == ""1"")), Times.Once);
            Assert.Null(result);
        }}

        [Fact]
        public async Task Update_ReturnsDto_WhenEntityUpdated()
        {{
            // Arrange
            {dtoInstantiation};
            {entityInstantiation};
            _mockRepository.Setup(r => r.Update(It.IsAny<{modelClassName}>())).ReturnsAsync(entity);

            // Act
            var result = await _service.Update(""Test Id"", dto);

            // Assert
            _mockRepository.Verify(r => r.Update(It.Is<{modelClassName}>(e => e.Id == dto.Id && e.Name == dto.Name)), Times.Once);
            Assert.Equal(dto.Id, result.Id);
            Assert.Equal(dto.Name, result.Name);
        }}

        [Fact]
        public async Task Update_ReturnsNull_WhenEntityNotUpdated()
        {{
            // Arrange
            {dtoInstantiation};
            _mockRepository.Setup(r => r.Update(It.IsAny<{modelClassName}>())).ReturnsAsync(({modelClassName})null);

            // Act
            var result = await _service.Update(""Test Id"", dto);

            // Assert
            _mockRepository.Verify(r => r.Update(It.Is<{modelClassName}>(e => e.Id == dto.Id && e.Name == dto.Name)), Times.Once);
            Assert.Null(result);
        }}

        [Fact]
        public async Task Delete_ReturnsTrue_WhenEntityDeleted()
        {{
            // Arrange
            _mockRepository.Setup(r => r.Delete(It.IsAny<string>())).ReturnsAsync(true);

            // Act
            var result = await _service.Delete(""1"");

            // Assert
            _mockRepository.Verify(r => r.Delete(It.Is<string>(id => id == ""1"")), Times.Once);
            Assert.True(result);
        }}

        [Fact]
        public async Task Delete_ReturnsFalse_WhenEntityNotDeleted()
        {{
            // Arrange
            _mockRepository.Setup(r => r.Delete(It.IsAny<string>())).ReturnsAsync(false);

            // Act
            var result = await _service.Delete(""1"");

            // Assert
            _mockRepository.Verify(r => r.Delete(It.Is<string>(id => id == ""1"")), Times.Once);
            Assert.False(result);
        }}
    }}
}}
";

    // Write the generated content to the specified file path
    File.WriteAllText(outputFilePath, content);
#>